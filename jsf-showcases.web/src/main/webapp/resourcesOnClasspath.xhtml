<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:fn="http://xmlns.jcp.org/jsp/jstl/functions"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:sh="http://jsfshowcase.palkonyves.hu/jsf-showcases">

<ui:composition template="/resources/templates/t_main.xhtml">

    <ui:define name="main">
    <h1>Resources on classpath</h1>

    <p>
        The Servlet specification defines how static resources can be reached on the classpath.
        Resources that do not end with *.jsf will be served by the servlet container in our case.
    </p>
    
    <h2>Resources in WAR</h2>
    <p>Every file in the WAR will be accessible from the browser except 
    files in the following directories:<br/> 
    <i>WEB-INF, META-INF</i><br/>
    <br/>    
    Also notice, that in the web.xml, we mapped the JSF servlet to *.jsf, so any request made to
    a resource that does not end with *.jsf will be served by the servlet container itself.
    <br/>
    For example:
    </p>
    
    <ul>
        <li><h:outputLink value="staticPage1.html">staticPage1.html</h:outputLink></li>
        <li><h:outputLink value="resources/css/style.css">resources/css/style.css</h:outputLink></li>
        <li>The following does not work: 
        <h:outputLink value="WEB-INF/web.xml">WEB-INF/web.xml</h:outputLink></li>
    </ul>
    
    <h2>Resources in WEB-INF/lib jars</h2>
    <p>The Servlet specification also defines where resources must be placed in library JARs,
    to make them accessible to the servlet container.<br/>
    <br/>
    Every resource in a library JAR must be placed into the <i>META-INF/resources</i> folder.
    That folder will be the root for every resource urls placed into the a library.<br/>
    The following resources are coming from a library JAR:
    </p>
    
    <ul>
        <li>Static page: <h:outputLink value="staticPage2.html">staticPage2.html</h:outputLink></li>
        <li>Static css: <h:outputLink value="css/staticCss.css">css/staticCss.css</h:outputLink></li>
        <li>Dynamic page:
        <h:link value="dynamicPage.jsf" outcome="dynamicPage"></h:link></li>
    </ul>
    
     
    <h2>Resources from JSF</h2>
    <p>When you use the &lt;h:outputScript&gt;, &lt;h:outputStylesheet&gt; and the <i>resource</i> 
    built-in EL object, then JSF will generate a JSF specific URL for that resource. There are 
    two benefits over the static resource resolution. First, the resource request from the browser 
    will be handled by the JSF servlet, thus it is possible to use EL expressions in
    the resource files. Second, we are able to write our own resource handlers to serve dynamically 
    generated resources, or images from a database.<br/>
    <br/>
    Example: 
    <h:outputLink value="#{resource['css:style.css']}" >#{resource['css:style.css']}</h:outputLink></p>
    	
    <h1 class="source">Source code</h1>
    <sh:codeSnippet file="resourcesOnClasspath.xhtml" showSource="true" />
    </ui:define>
</ui:composition>
</html>